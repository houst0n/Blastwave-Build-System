--- openobex-1.3/lib/obex_header.h.orig	2007-10-25 18:50:17.531371000 +0800
+++ openobex-1.3/lib/obex_header.h	2007-10-25 18:22:49.863675000 +0800
@@ -93,7 +93,7 @@
 struct obex_unicode_hdr {
 	uint8_t  hi;
 	uint16_t hl;
-	uint8_t  hv[0];
+	uint8_t  hv[1];
 } PACKED;
 
 #define obex_byte_stream_hdr obex_unicode_hdr
--- openobex-1.3/lib/obex_header.c.orig	2007-10-25 17:38:37.128613000 +0800
+++ openobex-1.3/lib/obex_header.c	2007-10-25 18:52:48.270649000 +0800
@@ -95,13 +95,13 @@
 	obex_return_val_if_fail(msg != NULL, -1);
 	obex_return_val_if_fail(text != NULL || size == 0, -1);
 
-	hdr = (struct obex_unicode_hdr *) buf_reserve_end(msg, size + sizeof(struct obex_unicode_hdr));
+	hdr = (struct obex_unicode_hdr *) buf_reserve_end(msg, size + offsetof(struct obex_unicode_hdr, hv));
 
 	hdr->hi = opcode;
-	hdr->hl = htons((uint16_t)(size + sizeof(struct obex_unicode_hdr)));
+	hdr->hl = htons((uint16_t)(size + offsetof(struct obex_unicode_hdr, hv)));
 	memcpy(hdr->hv, text, size);
 
-	return size + sizeof(struct obex_unicode_hdr);
+	return size + offsetof(struct obex_unicode_hdr, hv);
 }
 
 /*
@@ -119,16 +119,16 @@
 	obex_return_val_if_fail(msg != NULL, -1);
 	obex_return_val_if_fail(stream != NULL || size == 0, -1);
 	
-	hdr = (struct obex_byte_stream_hdr *) buf_reserve_end(msg, size + sizeof(struct obex_byte_stream_hdr));
+	hdr = (struct obex_byte_stream_hdr *) buf_reserve_end(msg, size + offsetof(struct obex_byte_stream_hdr, hv));
 	if (hdr == 0) {
 		DEBUG(4, "put failed!\n");
 		return 0;
 	}
 
 	hdr->hi = opcode;
-	hdr->hl = htons(size + sizeof(struct obex_byte_stream_hdr));
+	hdr->hl = htons(size + offsetof(struct obex_byte_stream_hdr, hv));
 
 	memcpy(hdr->hv, stream, size);
 
-	return size + sizeof(struct obex_byte_stream_hdr);
+	return size + offsetof(struct obex_byte_stream_hdr, hv);
 }
--- openobex-1.3/lib/obex_object.c.orig	2007-10-25 17:38:55.918345000 +0800
+++ openobex-1.3/lib/obex_object.c	2007-10-25 18:52:57.503224000 +0800
@@ -152,7 +152,6 @@
 	int ret = -1;
 	struct obex_header_element *element;
 	unsigned int maxlen;
-
 	DEBUG(4, "\n");
 	/* End of stream marker */
 	if(flags & OBEX_FL_STREAM_DATAEND)	{
@@ -228,9 +227,9 @@
 	case OBEX_BYTE_STREAM:
 		DEBUG(2, "BS  header size %d\n", hv_size);
 
-		element->buf = buf_new(hv_size + sizeof(struct obex_byte_stream_hdr) );
+		element->buf = buf_new(hv_size + offsetof (struct obex_byte_stream_hdr, hv));
 		if(element->buf) {
-			element->length = hv_size + sizeof(struct obex_byte_stream_hdr);
+			element->length = hv_size + offsetof (struct obex_byte_stream_hdr, hv);
 			ret = insert_byte_stream_header(element->buf, hi, hv.bs, hv_size);
 		}
 		break;
@@ -238,9 +237,9 @@
 	case OBEX_UNICODE:
 		DEBUG(2, "Unicode header size %d\n", hv_size);
 
-		element->buf = buf_new(hv_size + sizeof(struct obex_unicode_hdr) );
+		element->buf = buf_new(hv_size + offsetof(struct obex_unicode_hdr, hv));
 		if(element->buf) {
-			element->length = hv_size + sizeof(struct obex_unicode_hdr);
+			element->length = hv_size + offsetof(struct obex_unicode_hdr, hv);
 			ret = insert_unicode_header(element->buf, hi, hv.bs, hv_size);
 		}
 		break;
@@ -292,9 +291,9 @@
 	
 	/* Fill in length and header type later, but reserve space for it */
 	body_txh  = (struct obex_byte_stream_hdr*) buf_reserve_end(txmsg,
-				sizeof(struct obex_byte_stream_hdr) );
-	tx_left -= sizeof(struct obex_byte_stream_hdr);
-	actual = sizeof(struct obex_byte_stream_hdr);
+				 offsetof (struct obex_byte_stream_hdr, hv));
+	tx_left -= offsetof (struct obex_byte_stream_hdr, hv);
+	actual = offsetof (struct obex_byte_stream_hdr, hv);
 	
 	do {
 		if(object->s_len == 0) {
@@ -371,7 +370,7 @@
 	struct obex_byte_stream_hdr *body_txh;
 	unsigned int actual;
 
-	body_txh = (struct obex_byte_stream_hdr*) buf_reserve_end(txmsg, sizeof(struct obex_byte_stream_hdr));
+	body_txh = (struct obex_byte_stream_hdr*) buf_reserve_end(txmsg, offsetof (struct obex_byte_stream_hdr, hv));
 
 	if(!h->body_touched) {
 		/* This is the first time we try to send this header
@@ -379,21 +378,21 @@
 		   before the actual body-data. We shall send this in every fragment
 		   so we just remove it for now.*/
 
-		buf_remove_begin(h->buf,  sizeof(struct obex_byte_stream_hdr) );
+		buf_remove_begin(h->buf, offsetof (struct obex_byte_stream_hdr, hv));
 		h->body_touched = TRUE;
 	}
 		
-	if(tx_left < ( h->buf->data_size +
-			sizeof(struct obex_byte_stream_hdr) ) )	{
+	if(tx_left < ( h->buf->data_size + offsetof (struct obex_byte_stream_hdr, hv))){
 		DEBUG(4, "Add BODY header\n");
 		body_txh->hi = OBEX_HDR_BODY;
 		body_txh->hl = htons((uint16_t)tx_left);
 
 		buf_insert_end(txmsg, h->buf->data, tx_left
-				- sizeof(struct obex_byte_stream_hdr) );
+				- offsetof (struct obex_byte_stream_hdr, hv));
 
 		buf_remove_begin(h->buf, tx_left
-				- sizeof(struct obex_byte_stream_hdr) );
+				- offsetof (struct obex_byte_stream_hdr, hv));
+
 		/* We have completely filled the tx-buffer */
 		actual = tx_left;
 	}
@@ -401,7 +400,7 @@
 		DEBUG(4, "Add BODY_END header\n");
 
 		body_txh->hi = OBEX_HDR_BODY_END;
-		body_txh->hl = htons((uint16_t) (h->buf->data_size + sizeof(struct obex_byte_stream_hdr)));
+		body_txh->hl = htons((uint16_t) (h->buf->data_size + offsetof (struct obex_byte_stream_hdr, hv)));
 		buf_insert_end(txmsg, h->buf->data, h->buf->data_size);
 		actual = h->buf->data_size;
 		
