diff -r d2a07bdc6744 JavaScriptCore/runtime/Structure.cpp
--- a/JavaScriptCore/runtime/Structure.cpp	Tue May 18 19:09:56 2010 +0800
+++ b/JavaScriptCore/runtime/Structure.cpp	Tue May 18 19:40:23 2010 +0800
@@ -163,7 +163,7 @@
         TransitionTable* transitionTable = new TransitionTable;
         setTransitionTable(transitionTable);
         if (existingTransition)
-            transitionTableAdd(std::make_pair(existingTransition->m_nameInPrevious.get(), existingTransition->m_attributesInPrevious), existingTransition, existingTransition->m_specificValueInPrevious);
+            transitionTableAdd(std::make_pair<RefPtr<JSC::UStringImpl>, unsigned>(existingTransition->m_nameInPrevious.get(), existingTransition->m_attributesInPrevious), existingTransition, existingTransition->m_specificValueInPrevious);
     }
     if (!specificValue) {
         TransitionTable::iterator find = transitionTable()->find(key);
@@ -444,7 +444,7 @@
     ASSERT(!structure->isDictionary());
     ASSERT(structure->typeInfo().type() == ObjectType);
 
-    if (Structure* existingTransition = structure->transitionTableGet(make_pair(propertyName.ustring().rep(), attributes), specificValue)) {
+    if (Structure* existingTransition = structure->transitionTableGet(make_pair<RefPtr<UString::Rep>, unsigned>(propertyName.ustring().rep(), attributes), specificValue)) {
         ASSERT(existingTransition->m_offset != noOffset);
         offset = existingTransition->m_offset + existingTransition->m_anonymousSlotCount;
         ASSERT(offset >= structure->m_anonymousSlotCount);
@@ -509,7 +509,7 @@
 
     transition->m_offset = offset - structure->m_anonymousSlotCount;
     ASSERT(structure->anonymousSlotCount() == transition->anonymousSlotCount());
-    structure->transitionTableAdd(make_pair(propertyName.ustring().rep(), attributes), transition.get(), specificValue);
+    structure->transitionTableAdd(make_pair<RefPtr<UString::Rep>, unsigned>(propertyName.ustring().rep(), attributes), transition.get(), specificValue);
     return transition.release();
 }
 
@@ -956,7 +956,7 @@
 
 bool Structure::hasTransition(UString::Rep* rep, unsigned attributes)
 {
-    return transitionTableHasTransition(make_pair(rep, attributes));
+    return transitionTableHasTransition(make_pair<RefPtr<UString::Rep>, unsigned>(rep, attributes));
 }
 
 size_t Structure::remove(const Identifier& propertyName)
diff -r d2a07bdc6744 JavaScriptCore/wtf/HashMap.h
--- a/JavaScriptCore/wtf/HashMap.h	Tue May 18 19:09:56 2010 +0800
+++ b/JavaScriptCore/wtf/HashMap.h	Tue May 18 19:40:23 2010 +0800
@@ -238,7 +238,8 @@
     HashMap<T, U, V, W, X>::inlineAdd(const KeyType& key, const MappedType& mapped) 
     {
         typedef HashMapTranslator<ValueType, ValueTraits, HashFunctions> TranslatorType;
-        return m_impl.template add<KeyType, MappedType, TranslatorType>(key, mapped);
+        pair<typename HashTableType::iterator, bool> p = m_impl.template add<KeyType, MappedType, TranslatorType>(key, mapped);
+        return make_pair<typename HashMap<T, U, V, W, X>::iterator, bool>(p.first, p.second);
     }
 
     template<typename T, typename U, typename V, typename W, typename X>
@@ -259,7 +260,8 @@
     HashMap<T, U, V, W, X>::add(const TYPE& key, const MappedType& value)
     {
         typedef HashMapTranslatorAdapter<ValueType, ValueTraits, TYPE, HashTranslator> Adapter;
-        return m_impl.template addPassingHashCode<TYPE, MappedType, Adapter>(key, value);
+        pair<typename HashTableType::iterator, bool> p = m_impl.template addPassingHashCode<TYPE, MappedType, Adapter>(key, value);
+        return make_pair<typename HashMap<T, U, V, W, X>::iterator, bool>(p.first, p.second);
     }
 
     template<typename T, typename U, typename V, typename W, typename X>
diff -r d2a07bdc6744 JavaScriptCore/wtf/HashSet.h
--- a/JavaScriptCore/wtf/HashSet.h	Tue May 18 19:09:56 2010 +0800
+++ b/JavaScriptCore/wtf/HashSet.h	Tue May 18 19:40:23 2010 +0800
@@ -207,7 +207,8 @@
     template<typename T, typename U, typename V>
     pair<typename HashSet<T, U, V>::iterator, bool> HashSet<T, U, V>::add(const ValueType& value)
     {
-        return m_impl.add(value);
+	pair<typename HashTable<T, T, IdentityExtractor<T>, U, V, V>::iterator, bool> p = m_impl.add(value);
+	return make_pair<typename HashSet<T, U, V>::iterator, bool>(p.first, p.second);
     }
 
     template<typename Value, typename HashFunctions, typename Traits>
@@ -216,7 +217,8 @@
     HashSet<Value, HashFunctions, Traits>::add(const T& value)
     {
         typedef HashSetTranslatorAdapter<ValueType, ValueTraits, T, HashTranslator> Adapter;
-        return m_impl.template addPassingHashCode<T, T, Adapter>(value, value);
+	pair<typename HashTableType::iterator, bool> p = m_impl.template addPassingHashCode<T, T, Adapter>(value, value);
+	return make_pair<iterator, bool>(p.first, p.second);
     }
 
     template<typename T, typename U, typename V>
diff -r d2a07bdc6744 JavaScriptCore/wtf/RefPtrHashMap.h
--- a/JavaScriptCore/wtf/RefPtrHashMap.h	Tue May 18 19:09:56 2010 +0800
+++ b/JavaScriptCore/wtf/RefPtrHashMap.h	Tue May 18 19:40:23 2010 +0800
@@ -205,14 +205,16 @@
     HashMap<RefPtr<T>, U, V, W, X>::inlineAdd(const KeyType& key, const MappedType& mapped) 
     {
         typedef HashMapTranslator<ValueType, ValueTraits, HashFunctions> TranslatorType;
-        return m_impl.template add<KeyType, MappedType, TranslatorType>(key, mapped);
+        pair<typename HashTableType::iterator, bool> p = m_impl.template add<KeyType, MappedType, TranslatorType>(key, mapped);
+        return make_pair<typename HashMap<RefPtr<T>, U, V, W, X>::iterator, bool>(p.first, p.second);
     }
 
     template<typename T, typename U, typename V, typename W, typename X>
     inline pair<typename HashMap<RefPtr<T>, U, V, W, X>::iterator, bool>
     HashMap<RefPtr<T>, U, V, W, X>::inlineAdd(RawKeyType key, const MappedType& mapped) 
     {
-        return m_impl.template add<RawKeyType, MappedType, RawKeyTranslator>(key, mapped);
+        pair<typename HashTableType::iterator, bool> p = m_impl.template add<RawKeyType, MappedType, RawKeyTranslator>(key, mapped);
+        return make_pair<typename HashMap<RefPtr<T>, U, V, W, X>::iterator, bool>(p.first, p.second);
     }
 
     template<typename T, typename U, typename V, typename W, typename X>
diff -r c59477597eb0 JavaScriptCore/runtime/Structure.cpp
--- a/JavaScriptCore/runtime/Structure.cpp	Tue May 18 21:41:44 2010 +0800
+++ b/JavaScriptCore/runtime/Structure.cpp	Tue May 18 21:43:45 2010 +0800
@@ -262,7 +262,8 @@
 {
     if (m_previous) {
         ASSERT(m_nameInPrevious);
-        m_previous->transitionTableRemove(make_pair(m_nameInPrevious.get(), m_attributesInPrevious), m_specificValueInPrevious);
+        m_previous->transitionTableRemove(make_pair<WTF::RefPtr<JSC::UStringImpl>,
+			unsigned>(m_nameInPrevious.get(), m_attributesInPrevious), m_specificValueInPrevious);
 
     }
     ASSERT(!m_enumerationCache.hasDeadObject());
