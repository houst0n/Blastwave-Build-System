diff -r 0ad6c6100f9b JavaScriptCore/runtime/UString.cpp
--- a/JavaScriptCore/runtime/UString.cpp	Mon Apr 19 15:15:27 2010 +0800
+++ b/JavaScriptCore/runtime/UString.cpp	Mon Apr 19 16:06:27 2010 +0800
@@ -705,19 +705,6 @@
     return (l1 > l2) ? 1 : -1;
 }
 
-bool equal(const UString::Rep* r, const UString::Rep* b)
-{
-    unsigned length = r->length();
-    if (length != b->length())
-        return false;
-    const UChar* d = r->characters();
-    const UChar* s = b->characters();
-    for (unsigned i = 0; i != length; ++i) {
-        if (d[i] != s[i])
-            return false;
-    }
-    return true;
-}
 
 CString UString::UTF8String(bool strict) const
 {
diff -r 0ad6c6100f9b WebCore/platform/text/StringImpl.h
--- a/WebCore/platform/text/StringImpl.h	Mon Apr 19 15:15:27 2010 +0800
+++ b/WebCore/platform/text/StringImpl.h	Mon Apr 19 16:07:02 2010 +0800
@@ -248,7 +248,7 @@
 
 private:
     using Noncopyable::operator new;
-    void* operator new(size_t, void* inPlace) { ASSERT(inPlace); return inPlace; }
+    void* operator new(size_t, void* p) { ASSERT(inPlace); return p; }
 
     static PassRefPtr<StringImpl> createStrippingNullCharactersSlowCase(const UChar*, unsigned length);
     
diff -r f96dc080483f JavaScriptCore/runtime/UStringImpl.h
--- a/JavaScriptCore/runtime/UStringImpl.h	Thu Apr 22 12:51:41 2010 +0800
+++ b/JavaScriptCore/runtime/UStringImpl.h	Thu Apr 22 12:58:01 2010 +0800
@@ -56,10 +56,9 @@
         BufferSubstring,
         BufferShared,
     };
-
+public:
     using Noncopyable::operator new;
-    void* operator new(size_t, void* inPlace) { return inPlace; }
-
+    void* operator new(size_t, void* p) { return p; }
     // For SmallStringStorage, which allocates an array and uses an in-place new.
     UStringOrRopeImpl() { }
 
@@ -337,7 +336,19 @@
         static_cast<UStringImpl*>(this)->deref();
 }
 
-bool equal(const UStringImpl*, const UStringImpl*);
+bool equal(const UStringImpl* r, const UStringImpl* b)
+{
+    unsigned length = r->length();
+    if (length != b->length())
+        return false;
+    const UChar* d = r->characters();
+    const UChar* s = b->characters();
+    for (unsigned i = 0; i != length; ++i) {
+        if (d[i] != s[i])
+            return false;
+    }
+    return true;
+}
 
 }
 
